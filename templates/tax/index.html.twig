{% extends 'bo.html.twig' %}

{% block title %}
    <title>Dashboard - Taxe</title>

{% endblock %}

{% block content %}
    <link rel="stylesheet" href="../../assets/css/tax/taxDash.css">
        <div class="col-md-3 mb-4">
            <input type="text" id="searchInput" placeholder="tapez un type " style="margin-top: 100px; margin-left: 50px">
        </div>


<div class="row">
    <div class="col-md-5 col-lg-8 col-xl-4 order-0 mb-4" style="margin-left: 50px">
        <div class="card h-100">
            <div class="card-header d-flex align-items-center justify-content-between pb-0">
                <div class="card-title mb-0">
                    <h5 class="m-0 me-2">Statistique de vos taxes</h5>
                </div>
            </div>
            <div class="card-body">
                <div class="row align-items-center">
                    <div class="col">

                    </div>
                    <div class="col">
                        <div id="chartTax"></div>
                    </div>
                </div>
                <ul>
                    {% for type, sum in sumsByType %}
                        <li class="d-flex mb-4 pb-1">
                            <div class="avatar flex-shrink-0 me-3">
                                <span class="avatar-initial rounded bg-label-primary"><i class="bx bx-dollar text-primary"></i></span>
                            </div>
                            <div class="d-flex w-100 flex-wrap align-items-center justify-content-between gap-2">
                                <div class="me-2">
                                    <h6 class="mb-0">{{ type }}</h6>
                                </div>
                                <div class="me-2">
                                    <h6 class="mb-0">{{ sum }}$</h6>
                                </div>
                            </div>
                        </li>
                    {% endfor %}
                </ul>
            </div>
        </div>
    </div>

    <div class="col-md-12 col-lg-4 mb-4">
        <div class="card">
            <div class="d-flex align-items-end row">
                <div class="col-8">
                    <div class="card-body">
                        <h6 class="card-title mb-1 text-nowrap">Votre Taxe s'éléve à </h6>
                        <small class="d-block mb-3 text-nowrap"></small>

                        <h5 class="card-title text-primary mb-1">{{ sommeTax2 }}$</h5>
                        <small class="d-block mb-4 pb-1 text-muted"></small>

{#                        <a href="{{ path('app_tax_index') }}" class="btn btn-sm btn-primary">voir listes des taxes </a>#}
                    </div>
                </div>
                <div class="col-4 pt-3 ps-0">
                    <img src="../../assets/img/illustrations/prize-light.png" width="90" height="140" class="rounded-start" alt="View Sales">
                </div>
            </div>
        </div>
        <style>
            /* Define styles for different tax types */
            .tax-type {
                display: inline-block;
                padding: 4px 8px;
                border-radius: 4px;
                color: rgba(255, 255, 255, 0.92);
                font-weight: bold;
            }

            /* Define background colors for different tax types */
            .tax-type.Depense { background-color: rgba(3, 195, 236, 0.6); }
            .tax-type.Crédit { background-color: rgba(113, 221, 55, 0.66); }
            .tax-type.Investissement { background-color: rgba(177, 147, 248, 0.61); }
            .tax-type.Banque { background-color: rgba(255, 108, 240, 0.66); }

            /* Add more classes for other tax types as needed */
        </style>
        <div class="card" style="margin-top: 40px; width: 800px;">
            <div id="tableau-container" class="table-responsive text-nowrap">
                <table id="taxTable" class="table table-striped">
                    <thead>
                    <tr>
                        <th>Montant</th>
                        <th>Type</th>
                        <th>Optimisation</th>
                    </tr>
                    </thead>
                    <tbody>
                    {% for tax in taxes %}
                        <tr>
                            <td>{{ tax.montant }}</td>
                            <td><span class="tax-type {{ tax.type }}">{{ tax.type }}</span></td>
                            <td>{{ tax.optimisation }}</td>
                        </tr>
                    {% else %}
                        <tr>
                            <td colspan="3">No records found</td>
                        </tr>
                    {% endfor %}
                    </tbody>
                </table>
                <!-- Pagination container -->
                <div class="pagination-container" style="float: right; margin-top: 20px;">
                    {{ knp_pagination_render(taxes, paginationTemplate) }}
                </div>
            </div>
             </div>
    </div>
</div>
    <script>
        let input = document.getElementById('searchInput');
        let table = document.getElementById('taxTable');

        // Add event listener to input field
        input.addEventListener('input', function() {
            let filter = input.value.trim().toUpperCase(); // Trim leading and trailing spaces
            let rows = table.getElementsByTagName('tr');

            // Loop through all table rows, hide those that don't match the search query
            for (let i = 0; i < rows.length; i++) {
                let type = rows[i].getElementsByTagName('td')[1];
                if (type) {
                    let content = type.textContent.toUpperCase();
                    if (content.startsWith(filter)) {
                        rows[i].style.display = '';
                    } else {
                        rows[i].style.display = 'none';
                    }
                }
            }
        });

        document.addEventListener('DOMContentLoaded', function () {
            var chartLabels = JSON.parse('{{ chartData.labels|raw }}');
            var chartDataValues = JSON.parse('{{ chartData.data|raw }}');
            var totalExpense = {{ sommeTax }}; // Calculate total expense

            // Define colors for each series based on tax type
            var seriesColors = [];

            // Loop through chart labels and assign colors based on tax type
            for (var i = 0; i < chartLabels.length; i++) {
                var taxType = chartLabels[i];
                var color;
                // Assign colors based on tax type
                if (taxType === "Depense") {
                    color = 'rgba(3, 195, 236, 0.6)'; // Purple
                } else if (taxType === "Investissement") {
                    color = 'rgba(177, 147, 248, 0.61)'; // Blue
                 } else if (taxType === "Banque") {
                color =  'rgba(255, 108, 240, 0.66)'; // Blue
            } else if (taxType === "Crédit") {
                    color = 'rgba(113, 221, 55, 0.66)'; // Blue
                }else {
                    // You can add more conditions for other tax types and assign colors accordingly
                    color = 'rgba(0,0,0,0)'; // Default color
                }
                seriesColors.push(color);
            }

            new ApexCharts(document.querySelector("#chartTax"), {
                series: chartDataValues,
                chart: {
                    height: 200,
                    type: 'donut',
                },
                plotOptions: {
                    pie: {
                        donut: {
                            size: '75%',
                            labels: {
                                show: true,
                                total: {
                                    show: false,
                                    fontSize: "0.8125rem",
                                    label: "",
                                }
                            }
                        }
                    }
                },
                tooltip: {
                    enabled: true,
                    y: {
                        formatter: function (value) {
                            return parseFloat(value).toFixed(1) + "%"; // Format tooltip value to two decimal places
                        }
                    }
                },
                dataLabels: {
                    enabled: false
                },
                stroke: {
                    width: 2,
                    curve: "smooth"
                },
                legend: {
                    show: false,
                    position: 'bottom',
                    fontSize: '20px',
                    fontFamily: 'Arial, sans-serif',
                    labels: { colors: '#9a74f1' }
                },
                labels: chartLabels,
                colors: seriesColors, // Assign dynamically fetched colors array to the colors option
                markers: {
                    size: 6,
                    colors: '#9a74f1',
                    strokeWidth: 3,
                    hover: { size: 8 }
                },
                grid: { show: false }
            }).render();
        });




    </script>

{% endblock %}
